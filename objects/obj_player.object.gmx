<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_soldier_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_dude</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize variables

move_snap(32,32)
image_speed = 0
mov = 2
atk = 2
hp = 5
range = 2
level = 0

set_stat_level(0)

cell_x = floor(x/32)
cell_y = floor(y/32)

wish_cell_x = cell_x
wish_cell_y = cell_y
wish_action = "None"
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update the wish of the player
if mouse_check_button(mb_right) {
    wish_cell_x = floor(mouse_x/global.tile_width)
    wish_cell_y = floor(mouse_y/global.tile_width)
    move_snap(global.tile_width,global.tile_width)
    if wish_cell_x == cell_x and wish_cell_y == cell_y {
        wish_action = "Wait"
    }
    else {
        wish_action = "Move"
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Code to apply the turn
if global.player_turn {
    if is_player_wish_valid() and wish_action == "Move" {
        cell_x = wish_cell_x
        cell_y = wish_cell_y
        x = cell_x * 32
        y = cell_y * 32
        /*with obj_GUI {
            btn_loot_visible = tile_get_background(tile_layer_find(1000000,other.cell_x*32,other.cell_y*32)) == bgd_city
        }*/
    }
    else if wish_action == "Loot" {
        if level &lt; 8 {
            set_stat_level(level+1)
        }
        else {
            atk = atk + 1
            hp = hp + 2
        }
        with obj_GUI {
            ds_grid_set(looted,other.cell_x,other.cell_y,true)
        }
    }
    else if wish_action == "Attack" {
        //Play attack sound
        var i;
        for (i = 0; i &lt; instance_number(obj_enemy); i += 1) {
            var enemy = instance_find(obj_enemy,i);
            if abs(cell_x - enemy.cell_x) + abs(cell_y - enemy.cell_y) &lt;= range {
                with(enemy) {
                    hp = hp - other.atk                
                }
            }
        }
    }
    wish_action = "None"
    global.player_turn = false
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>500</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring>draw_self();</codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the wish of the player

if (wish_cell_x != cell_x or wish_cell_y != cell_y) and wish_action == "Move" {
    var tile_width = global.tile_width
    if (is_player_wish_valid(mov)) {
        draw_set_colour(c_white)
    }
    else {
        draw_set_colour(c_red)
    }
    draw_rectangle(wish_cell_x * tile_width, wish_cell_y * tile_width,(wish_cell_x + 1) * tile_width, (wish_cell_y + 1) * tile_width, true)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
